const fs = require('fs');
const path = require('path');
const login = require('./fb-chat-api/index');
const express = require('express');
const chalk = require('chalk');
const bodyParser = require('body-parser');
const schedule = require('node-schedule');
const app = express();
const PORT = 3000;

// Helper functions
function readConfig(filePath) {
  if (fs.existsSync(filePath)) {
    return JSON.parse(fs.readFileSync(filePath, 'utf8'));
  }
  return createConfig();
}

function writeConfig(filePath, data) {
  return fs.writeFileSync(filePath, JSON.stringify(data, null, 2));
}

function isValidObject(obj) {
  return obj && typeof obj === 'object';
}

// Utils
const utils = {
  commands: new Map(),
  handleEvent: new Map(),
  account: new Map(),
  cooldowns: new Map(),
  objectReply: new Map(),
  handleReply: [],
};

const scriptPath = path.join(__dirname, 'script');
const configPath = './data/config.json';
const historyPath = './data/history.json';
const databasePath = './data/database.json';

const config = readConfig(configPath);
const history = readConfig(historyPath);
const database = readConfig(databasePath);

// Load commands, handleEvent, and objectReply
fs.readdirSync(scriptPath).forEach((file) => {
  const filePath = path.join(scriptPath, file);
  const stats = fs.statSync(filePath);

  if (stats.isDirectory()) {
    fs.readdirSync(filePath).forEach((file) => {
      try {
        const {
          config,
          run,
          handleEvent,
          handleReply,
        } = require(path.join(filePath, file));

        if (config && run) {
          addCommand(config, run);
        }

        if (config && handleEvent) {
          addHandleEvent(config, handleEvent);
        }

        if (config && handleReply) {
          addObjectReply(config, handleReply);
        }
      } catch (error) {
        console.error(chalk.red(`Error installing command from file ${file}: ${error.message}`));
      }
    });
  } else {
    try {
      const {
        config,
        run,

